(()=>{var e={};e.id=7,e.ids=[7],e.modules={5263:e=>{function t(e){var t=Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5263,e.exports=t},20399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},65248:(e,t,a)=>{"use strict";a.r(t),a.d(t,{originalPathname:()=>f,patchFetch:()=>g,requestAsyncStorage:()=>_,routeModule:()=>T,serverHooks:()=>R,staticGenerationAsyncStorage:()=>y});var r={};a.r(r),a.d(r,{GET:()=>p,PUT:()=>E,dynamic:()=>d,revalidate:()=>c,runtime:()=>l});var n=a(49303),o=a(88716),s=a(60670),u=a(87070),i=a(44061);let l="nodejs",d="force-dynamic",c=0;async function p(e){let{searchParams:t}=new URL(e.url),a=t.get("key")||"default";try{let e=await (0,i.y0)(a);if(!e)return new u.NextResponse(null,{status:204,headers:{"Cache-Control":"no-store"}});return u.NextResponse.json(e,{headers:{"Cache-Control":"no-store"}})}catch(e){return u.NextResponse.json({error:e?.message||"error"},{status:500})}}async function E(e){let{searchParams:t}=new URL(e.url),a=t.get("key")||"default";try{let t=await e.json();return await (0,i.II)(a,t),u.NextResponse.json({ok:!0},{headers:{"Cache-Control":"no-store"}})}catch(e){return u.NextResponse.json({error:e?.message||"error"},{status:500})}}let T=new n.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/state/route",pathname:"/api/state",filename:"route",bundlePath:"app/api/state/route"},resolvedPagePath:"C:\\Users\\fabia\\Documents\\Personal\\Trabajo\\git_Projects\\test-codex2\\src\\app\\api\\state\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:_,staticGenerationAsyncStorage:y,serverHooks:R}=T,f="/api/state/route";function g(){return(0,s.patchFetch)({serverHooks:R,staticGenerationAsyncStorage:y})}},44061:(e,t,a)=>{"use strict";a.d(t,{II:()=>p,KD:()=>E,ws:()=>T,y0:()=>c});let r=(process.env.PERSIST_DRIVER||"").toLowerCase(),n=null;async function o(){let{Pool:e}=l("pg"),t=process.env.DATABASE_URL;if(!t)throw Error("DATABASE_URL requerido para postgres");global.__pgPool=global.__pgPool||new e({connectionString:t});let a=global.__pgPool;await a.query(`CREATE TABLE IF NOT EXISTS dashboard_state (
      key TEXT PRIMARY KEY,
      content JSONB NOT NULL,
      updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
    )`)}function s(){return global.__pgPool}async function u(){let e=l("better-sqlite3"),t=process.env.SQLITE_FILE||"./data.sqlite";global.__sqlite=global.__sqlite||new e(t);let a=global.__sqlite;a.pragma("journal_mode = WAL"),a.prepare(`CREATE TABLE IF NOT EXISTS dashboard_state (
      key TEXT PRIMARY KEY,
      content TEXT NOT NULL,
      updated_at TEXT NOT NULL DEFAULT (datetime('now'))
    )`).run()}function i(){return global.__sqlite}function l(e){try{return a(5263)(e)}catch(t){throw Error(`Dependencia faltante '${e}'. Instala el paquete para usar '${r||""}'.`)}}async function d(){return n||(n=(async()=>{if("postgres"===r)await o();else if("sqlite"===r)await u();else if(!r)return;else throw Error(`PERSIST_DRIVER desconocido: ${r}`)})())}async function c(e){if(await d(),"postgres"===r){let t=s(),{rows:a}=await t.query("SELECT content FROM dashboard_state WHERE key = $1",[e]);return a.length?a[0].content:null}if("sqlite"===r){let t=i().prepare("SELECT content FROM dashboard_state WHERE key = ?").get(e);if(!t)return null;try{return JSON.parse(t.content)}catch{}}return null}async function p(e,t){if(await d(),"postgres"===r){let a=s();await a.query(`INSERT INTO dashboard_state (key, content) VALUES ($1, $2::jsonb)
       ON CONFLICT (key) DO UPDATE SET content = EXCLUDED.content, updated_at = now()`,[e,JSON.stringify(t)]);return}if("sqlite"===r){let a=i(),r=JSON.stringify(t);a.prepare(`INSERT INTO dashboard_state (key, content, updated_at) VALUES (?, ?, datetime('now'))
       ON CONFLICT(key) DO UPDATE SET content = excluded.content, updated_at = excluded.updated_at`).run(e,r);return}}async function E(){if(await d(),"postgres"===r){let e=s(),{rows:t}=await e.query("SELECT key, to_char(updated_at, 'YYYY-MM-DD\"T\"HH24:MI:SSZ') as updated_at FROM dashboard_state ORDER BY updated_at DESC");return t}return"sqlite"===r?i().prepare("SELECT key, updated_at FROM dashboard_state ORDER BY updated_at DESC").all():[]}async function T(e){if(await d(),"postgres"===r){let t=s();await t.query("DELETE FROM dashboard_state WHERE key = $1",[e]);return}if("sqlite"===r){i().prepare("DELETE FROM dashboard_state WHERE key = ?").run(e);return}}}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[948,972],()=>a(65248));module.exports=r})();